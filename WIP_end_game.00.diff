diff --git a/src/core/apply.rs b/src/core/apply.rs
index eb68e25..29d458f 100644
--- a/src/core/apply.rs
+++ b/src/core/apply.rs
@@ -26,6 +26,7 @@ fn apply_event(state: &mut State, event: &Event) {
         ActiveEvent::MoveTo(ref ev) => apply_event_move_to(state, ev),
         ActiveEvent::Attack(ref ev) => apply_event_attack(state, ev),
         ActiveEvent::EndTurn(ref ev) => apply_event_end_turn(state, ev),
+        ActiveEvent::EndGame(_) => unimplemented!("TODO: EndGame?"),
         ActiveEvent::BeginTurn(ref ev) => apply_event_begin_turn(state, ev),
         ActiveEvent::UseAbility(ref ev) => apply_event_use_ability(state, ev),
         ActiveEvent::UsePassiveAbility(ref ev) => apply_event_use_passive_ability(state, ev),
diff --git a/src/core/event.rs b/src/core/event.rs
index cd301fc..a7200a9 100644
--- a/src/core/event.rs
+++ b/src/core/event.rs
@@ -20,6 +20,7 @@ pub struct Event {
 #[derive(Debug, Clone)]
 pub enum ActiveEvent {
     Create,
+    EndGame(EndGame),
     EndTurn(EndTurn),
     BeginTurn(BeginTurn),
     UseAbility(UseAbility),
@@ -55,6 +56,11 @@ pub struct EndTurn {
     pub player_id: PlayerId,
 }
 
+#[derive(Debug, Clone)]
+pub struct EndGame {
+    pub winner: PlayerId,
+}
+
 #[derive(Debug, Clone)]
 pub struct BeginTurn {
     pub player_id: PlayerId,
diff --git a/src/visualize.rs b/src/visualize.rs
index cda005d..a3adea5 100644
--- a/src/visualize.rs
+++ b/src/visualize.rs
@@ -290,6 +290,7 @@ fn visualize_event(
         ActiveEvent::MoveTo(ref ev) => visualize_event_move_to(state, view, context, ev)?,
         ActiveEvent::Attack(ref ev) => visualize_event_attack(state, view, context, ev)?,
         ActiveEvent::EndTurn(ref ev) => visualize_event_end_turn(state, view, context, ev),
+        ActiveEvent::EndGame(_) => unimplemented!("visualize_event: EndTurn"),
         ActiveEvent::BeginTurn(ref ev) => visualize_event_begin_turn(state, view, context, ev)?,
         ActiveEvent::EffectTick(ref ev) => visualize_event_effect_tick(state, view, ev)?,
         ActiveEvent::EffectEnd(ref ev) => visualize_event_effect_end(state, view, context, ev)?,
